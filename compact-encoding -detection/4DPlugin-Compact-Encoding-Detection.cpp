/* --------------------------------------------------------------------------------
 #
 #  4DPlugin-Compact-Encoding-Detection.cpp
 #	source generated by 4D Plugin Wizard
 #	Project : Compact Encoding Detection
 #	author : miyako
 #	2020/01/14
 #  
 # --------------------------------------------------------------------------------*/

#include "4DPlugin-Compact-Encoding-Detection.h"

#pragma mark -

void PluginMain(PA_long32 selector, PA_PluginParameters params) {
    
	try
	{
        switch(selector)
        {
			// --- Compact Encoding Detection
            
			case 1 :
				CED_Detect_encoding(params);
				break;

        }

	}
	catch(...)
	{

	}
}

#pragma mark -

void CED_Detect_encoding(PA_PluginParameters params) {
    
    PA_ObjectRef returnValue = PA_CreateObject();
    
    void *bytes = NULL;
    PA_long32 len = PA_GetBlobParameter(params, 1, bytes);
    
    if(len)
    {
        CompactEncDet::TextCorpusType corpus = CompactEncDet::WEB_CORPUS;
        bool ignore_7bit_mail_encodings = false;
        char *httpCharsetHint = nullptr; CUTF8String _httpCharsetHint;
        char *metaCharsetHint = nullptr; CUTF8String _metaCharsetHint;
        char *urlHint = nullptr; CUTF8String _urlHint;
        
        PA_ObjectRef options = PA_GetObjectParameter(params, 2);
        
        if(options) {
            
            if(ob_is_defined(options, L"ignore7bitMailEncodings")) {
                ignore_7bit_mail_encodings = ob_get_b(options, L"ignore7bitMailEncodings");
            }
            
            if(ob_is_defined(options, L"httpCharsetHint")) {
                if(ob_get_s(options, L"httpCharsetHint", &_httpCharsetHint)) {
                    httpCharsetHint = (char *)_httpCharsetHint.c_str();
                }
            }
            
            if(ob_is_defined(options, L"metaCharsetHint")) {
                if(ob_get_s(options, L"metaCharsetHint", &_metaCharsetHint)) {
                    metaCharsetHint = (char *)_metaCharsetHint.c_str();
                }
            }
            
            if(ob_is_defined(options, L"urlHint")) {
                if(ob_get_s(options, L"urlHint", &_urlHint)) {
                    urlHint = (char *)_urlHint.c_str();
                }
            }
            
            if(ob_is_defined(options, L"corpus")) {
                
                CUTF8String _corpus;
                if(ob_get_s(options, L"corpus", &_corpus)) {
                    if(_corpus == (const uint8_t *)"WEB_CORPUS") {
                        corpus = CompactEncDet::WEB_CORPUS;
                    }else
                    if(_corpus == (const uint8_t *)"XML_CORPUS") {
                        corpus = CompactEncDet::XML_CORPUS;
                    }else
                    if(_corpus == (const uint8_t *)"QUERY_CORPUS") {
                        corpus = CompactEncDet::QUERY_CORPUS;
                    }else
                    if(_corpus == (const uint8_t *)"EMAIL_CORPUS") {
                        corpus = CompactEncDet::EMAIL_CORPUS;
                    }
                    
                }
            }
        }
        
        bool is_reliable;
        int bytes_consumed;
        
        const int encoding_hint = UNKNOWN_ENCODING;
        const Language language_hint = UNKNOWN_LANGUAGE;
        
        std::vector<uint8_t>buf(len);
        bytes = &buf[0];
        PA_GetBlobParameter(params, 1, bytes);
        
        Encoding encoding = CompactEncDet::DetectEncoding(
                                                          (const char *)bytes,
                                                          len,
                                                          (const char *)urlHint,
                                                          (const char *)httpCharsetHint,
                                                          (const char *)metaCharsetHint,
                                                          encoding_hint,
                                                          language_hint,
                                                          (const CompactEncDet::TextCorpusType)corpus,
                                                          ignore_7bit_mail_encodings,
                                                          &bytes_consumed,
                                                          &is_reliable);
        
        ob_set_b(returnValue, L"isReliable", is_reliable);
        ob_set_n(returnValue, L"bytesConsumed", bytes_consumed);
        
        
        switch (encoding) {
            case ISO_8859_1:
                ob_set_s(returnValue, L"encoding", "ISO_8859_1");
                break;
            case ISO_8859_2:
                ob_set_s(returnValue, L"encoding", "ISO_8859_2");
                break;
            case ISO_8859_3:
                ob_set_s(returnValue, L"encoding", "ISO_8859_3");
                break;
            case ISO_8859_4:
                ob_set_s(returnValue, L"encoding", "ISO_8859_4");
                break;
            case ISO_8859_5:
                ob_set_s(returnValue, L"encoding", "ISO_8859_5");
                break;
            case ISO_8859_6:
                ob_set_s(returnValue, L"encoding", "ISO_8859_6");
                break;
            case ISO_8859_7:
                ob_set_s(returnValue, L"encoding", "ISO_8859_7");
                break;
            case ISO_8859_8:
                ob_set_s(returnValue, L"encoding", "ISO_8859_8");
                break;
            case ISO_8859_9:
                ob_set_s(returnValue, L"encoding", "ISO_8859_9");
                break;
            case ISO_8859_10:
                ob_set_s(returnValue, L"encoding", "ISO_8859_10");
                break;
            case JAPANESE_EUC_JP:
                ob_set_s(returnValue, L"encoding", "JAPANESE_EUC_JP");
                break;
            case JAPANESE_SHIFT_JIS:
                ob_set_s(returnValue, L"encoding", "JAPANESE_SHIFT_JIS");
                break;
            case JAPANESE_JIS:
                ob_set_s(returnValue, L"encoding", "JAPANESE_JIS");
                break;
            case CHINESE_BIG5:
                ob_set_s(returnValue, L"encoding", "CHINESE_BIG5");
                break;
            case CHINESE_GB:
                ob_set_s(returnValue, L"encoding", "CHINESE_GB");
                break;
            case CHINESE_EUC_CN:
                ob_set_s(returnValue, L"encoding", "CHINESE_EUC_CN");
                break;
            case KOREAN_EUC_KR:
                ob_set_s(returnValue, L"encoding", "KOREAN_EUC_KR");
                break;
            case UNICODE:
                ob_set_s(returnValue, L"encoding", "UNICODE");
                break;
            case CHINESE_EUC_DEC:
                ob_set_s(returnValue, L"encoding", "CHINESE_EUC_TW");
                break;
            case CHINESE_CNS:
                ob_set_s(returnValue, L"encoding", "CHINESE_CNS");
                break;
            case CHINESE_BIG5_CP950:
                ob_set_s(returnValue, L"encoding", "CHINESE_BIG5_CP950");
                break;
            case JAPANESE_CP932:
                ob_set_s(returnValue, L"encoding", "JAPANESE_CP932");
                break;
            case UTF8:
                ob_set_s(returnValue, L"encoding", "UTF8");
                break;
            case UNKNOWN_ENCODING:
                ob_set_s(returnValue, L"encoding", "UNKNOWN_ENCODING");
                break;
            case ASCII_7BIT:
                ob_set_s(returnValue, L"encoding", "ASCII_7BIT");
                break;
            case RUSSIAN_KOI8_R:
                ob_set_s(returnValue, L"encoding", "RUSSIAN_KOI8_R");
                break;
            case RUSSIAN_CP1251:
                ob_set_s(returnValue, L"encoding", "RUSSIAN_CP1251");
                break;
            case MSFT_CP1252:
                ob_set_s(returnValue, L"encoding", "MSFT_CP1252");
                break;
            case RUSSIAN_KOI8_RU:
                ob_set_s(returnValue, L"encoding", "RUSSIAN_KOI8_RU");
                break;
            case MSFT_CP1250:
                ob_set_s(returnValue, L"encoding", "MSFT_CP1250");
                break;
            case ISO_8859_15:
                ob_set_s(returnValue, L"encoding", "ISO_8859_15");
                break;
            case MSFT_CP1254:
                ob_set_s(returnValue, L"encoding", "MSFT_CP1254");
                break;
            case MSFT_CP1257:
                ob_set_s(returnValue, L"encoding", "MSFT_CP1257");
                break;
            case ISO_8859_11:
                ob_set_s(returnValue, L"encoding", "ISO_8859_11");
                break;
            case MSFT_CP874:
                ob_set_s(returnValue, L"encoding", "MSFT_CP874");
                break;
            case MSFT_CP1256:
                ob_set_s(returnValue, L"encoding", "MSFT_CP1256");
                break;
            case MSFT_CP1255:
                ob_set_s(returnValue, L"encoding", "MSFT_CP1255");
                break;
            case ISO_8859_8_I:
                ob_set_s(returnValue, L"encoding", "ISO_8859_8_I");
                break;
            case HEBREW_VISUAL:
                ob_set_s(returnValue, L"encoding", "HEBREW_VISUAL");
                break;
            case CZECH_CP852:
                ob_set_s(returnValue, L"encoding", "CZECH_CP852");
                break;
            case CZECH_CSN_369103:
                ob_set_s(returnValue, L"encoding", "CZECH_CSN_369103");
                break;
            case MSFT_CP1253:
                ob_set_s(returnValue, L"encoding", "MSFT_CP1253");
                break;
            case RUSSIAN_CP866:
                ob_set_s(returnValue, L"encoding", "RUSSIAN_CP866");
                break;
            case ISO_8859_13:
                ob_set_s(returnValue, L"encoding", "ISO_8859_13");
                break;
            case ISO_2022_KR:
                ob_set_s(returnValue, L"encoding", "ISO_2022_KR");
                break;
            case GBK:
                ob_set_s(returnValue, L"encoding", "GBK");
                break;
            case GB18030:
                ob_set_s(returnValue, L"encoding", "GB18030");
                break;
            case BIG5_HKSCS:
                ob_set_s(returnValue, L"encoding", "BIG5_HKSCS");
                break;
            case ISO_2022_CN:
                ob_set_s(returnValue, L"encoding", "ISO_2022_CN");
                break;
            case TSCII:
                ob_set_s(returnValue, L"encoding", "TSCII");
                break;
            case TAMIL_MONO:
                ob_set_s(returnValue, L"encoding", "TAMIL_MONO");
                break;
            case TAMIL_BI:
                ob_set_s(returnValue, L"encoding", "TAMIL_BI");
                break;
            case JAGRAN:
                ob_set_s(returnValue, L"encoding", "JAGRAN");
                break;
            case MACINTOSH_ROMAN:
                ob_set_s(returnValue, L"encoding", "MACINTOSH_ROMAN");
                break;
            case UTF7:
                ob_set_s(returnValue, L"encoding", "UTF7");
                break;
            case BHASKAR:
                ob_set_s(returnValue, L"encoding", "BHASKAR");
                break;
            case HTCHANAKYA:
                ob_set_s(returnValue, L"encoding", "HTCHANAKYA");
                break;
            case UTF16BE:
                ob_set_s(returnValue, L"encoding", "UTF16BE");
                break;
            case UTF16LE:
                ob_set_s(returnValue, L"encoding", "UTF16LE");
                break;
            case UTF32BE:
                ob_set_s(returnValue, L"encoding", "UTF32BE");
                break;
            case UTF32LE:
                ob_set_s(returnValue, L"encoding", "UTF32LE");
                break;
            case BINARYENC:
                ob_set_s(returnValue, L"encoding", "BINARYENC");
                break;
            case HZ_GB_2312:
                ob_set_s(returnValue, L"encoding", "HZ_GB_2312");
                break;
            case UTF8UTF8:
                ob_set_s(returnValue, L"encoding", "UTF8UTF8");
                break;
            case TAM_ELANGO:
                ob_set_s(returnValue, L"encoding", "TAM_ELANGO");
                break;
            case TAM_LTTMBARANI:
                ob_set_s(returnValue, L"encoding", "TAM_LTTMBARANI");
                break;
            case TAM_SHREE:
                ob_set_s(returnValue, L"encoding", "TAM_SHREE");
                break;
            case TAM_TBOOMIS:
                ob_set_s(returnValue, L"encoding", "TAM_TBOOMIS");
                break;
            case TAM_TMNEWS:
                ob_set_s(returnValue, L"encoding", "TAM_TMNEWS");
                break;
            case TAM_WEBTAMIL:
                ob_set_s(returnValue, L"encoding", "TAM_WEBTAMIL");
                break;
            case KDDI_SHIFT_JIS:
                ob_set_s(returnValue, L"encoding", "KDDI_SHIFT_JIS");
                break;
            case DOCOMO_SHIFT_JIS:
                ob_set_s(returnValue, L"encoding", "DOCOMO_SHIFT_JIS");
                break;
            case SOFTBANK_SHIFT_JIS:
                ob_set_s(returnValue, L"encoding", "SOFTBANK_SHIFT_JIS");
                break;
            case KDDI_ISO_2022_JP:
                ob_set_s(returnValue, L"encoding", "KDDI_ISO_2022_JP");
                break;
            case SOFTBANK_ISO_2022_JP:
                ob_set_s(returnValue, L"encoding", "SOFTBANK_ISO_2022_JP");
                break;
            default:
                break;
        }
    }
    
    PA_ReturnObject(params, returnValue);
}

